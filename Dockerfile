# =========================================================================
# I ЭТАП: Сборщик (Builder)
# Используем официальный образ Go как базу для сборки.
# Указание конкретной версии (например, 1.21) важно для воспроизводимости.
# Alpine-версия образа меньше по размеру, что ускоряет скачивание.
# =========================================================================
FROM golang:1.24-alpine AS builder

# Устанавливаем рабочую директорию внутри контейнера.
WORKDIR /src

# Устанавливаем необходимые для компиляции утилиты, если они нужны.
# Например, git для скачивания приватных модулей.
# RUN apk --no-cache add git

# ШАГ 1: Копируем файлы зависимостей.
# Копируем go.mod и go.sum отдельно от остального кода.
# Этот слой будет кэшироваться Docker, если эти файлы не меняются.
COPY go.mod go.sum ./

# ШАГ 2: Скачиваем зависимости.
# Docker закэширует этот слой. Сборка будет быстрой, если вы меняете
# только код приложения, а не его зависимости.
RUN go mod download

# ШАГ 3: Копируем исходный код приложения.
# Этот слой будет пересобираться чаще всего.
COPY . .

# ШАГ 4: Собираем приложение.
# - CGO_ENABLED=0: Собираем статически слинкованный бинарник без зависимостей от системных C-библиотек.
#   Это КРИТИЧЕСКИ важно для запуска в минималистичных образах вроде scratch или alpine.
# - -ldflags="-w -s": Убираем отладочную информацию и таблицу символов.
#   Это значительно уменьшает размер конечного бинарного файла.
# - -o /app/s3-proxy: Указываем, куда положить скомпилированный файл.
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o /app/s3-proxy .


# =========================================================================
# II ЭТАП: Финальный образ (Final)
# Используем один из самых маленьких, но функциональных базовых образов.
# Alpine содержит базовые утилиты и, что важно, корневые CA сертификаты.
# =========================================================================
FROM alpine:latest

# Устанавливаем корневые сертификаты.
# Они НЕОБХОДИМЫ для выполнения HTTPS-запросов к S3-бэкендам.
# Без этого пакета ваше приложение не сможет установить TLS-соединение.
RUN apk --no-cache add ca-certificates

# Создаем специальную группу и пользователя без прав root для запуска приложения.
# Это одна из ключевых практик безопасности контейнеров.
# -S: системный пользователь, без домашней директории по умолчанию и пароля.
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Переключаемся на созданного пользователя.
# Все последующие команды (включая ENTRYPOINT) будут выполняться от его имени.
USER appuser

# Копируем только скомпилированный бинарный файл из этапа 'builder'.
# Никакого исходного кода, компилятора или лишних файлов в финальном образе!
COPY --from=builder /app/s3-proxy /s3-proxy

# "Документируем" порты, которые приложение слушает.
# Основной S3 API порт.
EXPOSE 9000
# Административный порт (метрики, хелсчеки).
EXPOSE 9001

# Команда для запуска приложения при старте контейнера.
# Используем формат exec (массив JSON), чтобы избежать запуска через shell.
ENTRYPOINT ["/s3-proxy"]